// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: proto/service.proto

package snapwall

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Sender_Send_FullMethodName         = "/service.Sender/Send"
	Sender_SendNodeData_FullMethodName = "/service.Sender/SendNodeData"
)

// SenderClient is the client API for Sender service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SenderClient interface {
	Send(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ServiceRequest, ServiceResponse], error)
	SendNodeData(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[NodeRequest, NodeResponse], error)
}

type senderClient struct {
	cc grpc.ClientConnInterface
}

func NewSenderClient(cc grpc.ClientConnInterface) SenderClient {
	return &senderClient{cc}
}

func (c *senderClient) Send(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ServiceRequest, ServiceResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Sender_ServiceDesc.Streams[0], Sender_Send_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ServiceRequest, ServiceResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Sender_SendClient = grpc.BidiStreamingClient[ServiceRequest, ServiceResponse]

func (c *senderClient) SendNodeData(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[NodeRequest, NodeResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Sender_ServiceDesc.Streams[1], Sender_SendNodeData_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[NodeRequest, NodeResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Sender_SendNodeDataClient = grpc.BidiStreamingClient[NodeRequest, NodeResponse]

// SenderServer is the server API for Sender service.
// All implementations must embed UnimplementedSenderServer
// for forward compatibility.
type SenderServer interface {
	Send(grpc.BidiStreamingServer[ServiceRequest, ServiceResponse]) error
	SendNodeData(grpc.BidiStreamingServer[NodeRequest, NodeResponse]) error
	mustEmbedUnimplementedSenderServer()
}

// UnimplementedSenderServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSenderServer struct{}

func (UnimplementedSenderServer) Send(grpc.BidiStreamingServer[ServiceRequest, ServiceResponse]) error {
	return status.Errorf(codes.Unimplemented, "method Send not implemented")
}
func (UnimplementedSenderServer) SendNodeData(grpc.BidiStreamingServer[NodeRequest, NodeResponse]) error {
	return status.Errorf(codes.Unimplemented, "method SendNodeData not implemented")
}
func (UnimplementedSenderServer) mustEmbedUnimplementedSenderServer() {}
func (UnimplementedSenderServer) testEmbeddedByValue()                {}

// UnsafeSenderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SenderServer will
// result in compilation errors.
type UnsafeSenderServer interface {
	mustEmbedUnimplementedSenderServer()
}

func RegisterSenderServer(s grpc.ServiceRegistrar, srv SenderServer) {
	// If the following call pancis, it indicates UnimplementedSenderServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Sender_ServiceDesc, srv)
}

func _Sender_Send_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SenderServer).Send(&grpc.GenericServerStream[ServiceRequest, ServiceResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Sender_SendServer = grpc.BidiStreamingServer[ServiceRequest, ServiceResponse]

func _Sender_SendNodeData_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SenderServer).SendNodeData(&grpc.GenericServerStream[NodeRequest, NodeResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Sender_SendNodeDataServer = grpc.BidiStreamingServer[NodeRequest, NodeResponse]

// Sender_ServiceDesc is the grpc.ServiceDesc for Sender service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Sender_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service.Sender",
	HandlerType: (*SenderServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Send",
			Handler:       _Sender_Send_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "SendNodeData",
			Handler:       _Sender_SendNodeData_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/service.proto",
}
